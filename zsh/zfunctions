#
# Zsh functions
#
#
# 2011-04-08    mth     Pulled out of zshrc.
#


up()
    {
    local n
    local p

    p="$PWD"
    n="${1:-1}"
    while [ "$n" -gt 0 ]
    do
	cd ..
	(( n = n - 1 ))
    done
    OLDPWD="$p"

    dirs
    }



findall() { find / -name "*$1*" -print; }

findme() { find ~ -name "*$1*" -print; }

findit() { find . -name "*$1*" -print; }

mman() { man ${1+"$@"} | col -b | l; }

mp3all() { find $1 -name "*.mp3" | sort -n | while read song; do mpg123 "$song"; sleep 1; done; }
flacall() { find $1 -name "*.flac" | sort -n | while read song; do flac123 "$song"; sleep 1; done; }

encodeit() {
  if [ $# -ne 2 ]; then
    echo "usage: encodeit source password"
    return 1
  fi
  src=$1
  trg=$1.enc
  pw=$2
  openssl enc -aes-256-cbc -salt -in $src -out $trg -pass pass:$pw
}

decodeit() {
  if [ $# -ne 1 ]; then
    echo "usage: decodeit source"
    return 1
  fi
  src=$1
  trg=$src:r
  openssl enc -d -aes-256-cbc -in $src -out $trg
}


dist()
    {
    mv "$1" "$1".dist &&
    cp "$1".dist "$1" &&
    chmod u+w "$1"
    }

# Zsh quirk: Or perhaps, more accurately, the undoing of an old sh quirk:
# Once upon a time, "$@" used to expand to "" instead of nothing at all
# when no positional parameters were set.  The way round this was to use
# ${1:+"$@"} instead of "$@".  Since zsh-3.1.6 this doesn't work.  But
# a bare "$@" seems to Do The Right Thing for all modern shells.  History!
m()
    {
    if SHELL=/bin/sh make "$@" > LOG 2>&1
    then
	    print \\007MAKE DONE in `pwd`
    else
	    print \\007MAKE FAILED in `pwd`
    fi &
    }

ma()
    {
    if SHELL=/bin/sh make "$@" >> LOG 2>&1
    then
	    print \\007MAKE DONE in `pwd`
    else
	    print \\007MAKE FAILED in `pwd`
    fi &
    }

keyboard()
    {
    sudo su -c "echo $1 > /sys/class/leds/smc::kbd_backlight/brightness"
    }

fbox() {
  BOX_ENVIRONMENT=$(box --bash-completion-index 2 --bash-completion-word box --bash-completion-word -e | fzf)
  if [ ! -z "$BOX_ENVIRONMENT" ]; then
    BOX_INSTANCE=$(box -e $BOX_ENVIRONMENT ls | tail -n +2 | fzf | awk '{print $1 ":" $2 "::" $6}')
    if [ ! -z "$BOX_INSTANCE" ]; then
      print -z "box -e $BOX_ENVIRONMENT ssh $BOX_INSTANCE"
    fi
  fi
}

s() {
  S_BRANCH=$(git for-each-ref --sort=-committerdate --format="%(refname)" refs/heads | fzf --preview="git log {}")
  if [ ! -z "S_BRANCH" ]; then
    R_BRANCH=$(echo $S_BRANCH | sed -e 's@refs/heads/@@')
    if [ ! -z "$R_BRANCH" ]; then
      git checkout $R_BRANCH
#      print -z "git checkout $R_BRANCH"
    fi
  fi
}

sr() {
  S_BRANCH=$(git for-each-ref --sort=-committerdate --format="%(refname)" refs/remotes | fzf --preview="git log {}")
  if [ ! -z "S_BRANCH" ]; then
    R_BRANCH=$(echo $S_BRANCH | sed -e 's@refs/remotes/origin/@@')
    if [ ! -z "$R_BRANCH" ]; then
      git checkout $R_BRANCH
#      print -z "git checkout $R_BRANCH"
    fi
  fi
}
