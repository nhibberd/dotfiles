Present:
========

emacs:------

elisp
functions,macros,hooks

etags
  \M-. -- navigate
  \M-x find-tags -- find a tag
  \M-, -- next tag

completion:
  hippie-complete
   -- show hippies.el
   \M-/  + bind to fance tab

  symbol complete:
   \M-t

templates/snippers
interpreter:
'python-switch-to-python \C-c\C-z 

running tests
 \C-c\C-c --> to send to buffer
 \C-xx --> run in seperate proxess

running a string
 \C-c\C-s


electric-buffer
 \C-xb show binding
ido
  tab
  backspace
  fuzzy complete
  \C-s next
  \C-t prev

 (mention icicles which i am scared of)


text navigation
 \C-a -- start of line
 \C-e -- end of line
 \C-j -- new line + indent
 \C-n -- next line
 \C-o -- open next line
 \C-p -- prev line
 \C-v -- page down
 \M-v -- page up
 \M-< -- start of file
 \M-> -- end of file
 \C-left -- backward word
 \C-right --forward word
 \C-up -- backwar paragraph
 \C-down -- forwad paragraph

 \M-g \M-g -- goto line x
 \M-g \M-n -- next error
 \M-g \M-p -- previous error

search:
 \C-s: incremental search forward
 \C-r: incremental search backward

test selection, kill ring, display kill ring

 yank etc..
 \C-y -- yank
 \M-y -- rotate through kill ring
 \C-c k -- display kill ring
 \C-spacebar -- set mark
 \Esc W -- copy
 \Ctrl W -- copy
 \C-k -- kill line
 \C-/ -- undo

git integration:
'git-status
 M - mark all
 u - unmark
 U - rollback
 = - diff

window manipulation
C-x2 -- split horiz
C-x3 -- split vert
C-xo -- switch
C-x1 -- close all
C-x0 -- close one
C-x left -- prev buffer
C-x right -- next buffer
C-l -- recenter window


help
\M-? or \C-h

\M-? b -- for key bindings

\M-x aproprs -- online help, search for commands etc...


repeat:
 Esc <number of times> <command>

macros
 \C-x(
 \C-x)
 \C-xe


test selection, kill ring, display kill ring:
'browse-kill-ring


shell: 
'shell

rope:
M-/ -- complete
M-? -- lucky complete
\C-c f -- find occurances
\C-c d -- documentation
\C-c g -- go to definition

project:
\C-x p <>
 f -- find file
 n <>
   m -- create module
   p -- create project
   c -- create class
   f -- create file
   d -- create directory

refactoring:
\C-c r <>
 i -- inline
 m -- extracr method
 l -- extract variable
 r -- rename
 v -- move
 r -- resturcture
 u -- use function
 
 

python:------
REPL
testing


Notes:
======

    (define-key map ":" 'python-electric-colon)
    (define-key map "\177" 'python-backspace)
    (define-key map "\C-c<" 'python-shift-left)
    (define-key map "\C-c>" 'python-shift-right)
    (define-key map "\C-c\C-k" 'python-mark-block)
    (define-key map "\C-c\C-n" 'python-next-statement)
    (define-key map "\C-c\C-p" 'python-previous-statement)
    (define-key map "\C-c\C-u" 'python-beginning-of-block)
    (define-key map "\C-c\C-f" 'python-describe-symbol)
    (define-key map "\C-c\C-w" 'python-check)
    (define-key map "\C-c\C-v" 'python-check) ; a la sgml-mode
    (define-key map "\C-c\C-s" 'python-send-string)
    (define-key map [?\C-\M-x] 'python-send-defun)
    (define-key map "\C-c\C-r" 'python-send-region)
    (define-key map "\C-c\M-r" 'python-send-region-and-go)
    (define-key map "\C-c\C-c" 'python-send-buffer)
    (define-key map "\C-c\C-z" 'python-switch-to-python)
    (define-key map "\C-c\C-m" 'python-load-file)
    (define-key map "\C-c\C-l" 'python-load-file) ; a la cmuscheme
    (substitute-key-definition 'complete-symbol 'symbol-complete
			       map global-map)
    (define-key map "\C-c\C-i" 'python-find-imports)
    (define-key map "\C-c\C-t" 'python-expand-template)
